2002-06-17  Jon Trowbridge  <trow@ximian.com>

	* rcd.c: Get rid of a warning by #including rcd-rpc-log.h

	* rcd-rpc-log.c: Added.  XML-RPC magic for log queries.

	* rcd.c (main): Register log methods.

	* rcd-rpc-util.c (rcd_rc_package_spec_to_xmlrpc): Made non-static
	so that I can use it in rcd-rpc-log.c.

	* rcd-query.c (rcd_query_begin): Set each part's 'processed' flag
	to FALSE.
	(rcd_query_match): Skip parts whose processed flag is TRUE.

	* rcd-log.c (rcd_log): Directly write out stringified log message,
	checking to make sure that the log file has been properly
	initialized.
	(rcd_log_query): Implements log querying, using the same
	QueryEngine/QueryParts framework as package queries.

	* rcd-log-entry.c (spec_to_str): Renamed from spec_str.  Changed
	log format to be more efficiently parseable.
	(split_on_vbar): A custom, high-efficiency line-splitter.
	(spec_from_str): Parse our a RCPackageSpec.
	(rcd_log_entry_parse): Implemented.  Parses log lines in a fairly
	efficient manner, without any memory allocs or frees.

2002-06-14  Joe Shaw  <joe@ximian.com>

	* rcd-rpc-packsys.c (packsys_package_info): Added.  Returns
	details on a package necessary for an "rpm -qi" like command.
	(rcd_rpc_packsys_register_methods): Register the channel-refresh
	heartbeat func here, and check in the heartbeat func that a
	packaging system lock isn't held so we don't end up refreshing the
	channel data in the middle of a transaction.
	(run_transaction): Grab the lock at the start of the transaction
	and release it at the end, start the heartbeat after the modules
	have been loaded.

	* rcd.c: Moved the channel refreshing heartbeat func out of here.

2002-06-14  Joe Shaw  <joe@ximian.com>

	* rcd-rpc-packsys.c: When adding messages to an RCDPending, use
	strings that will be parsed by the client instead of user-visible
	strings, to keep localization issues out of the daemon and in the
	client where they belong.

	* rcd-transfer-file.c (file_get_local_filename): Return the full
	path to the file instead of just the filename.

2002-06-14  Joe Shaw  <joe@ximian.com>

	* rcd-fetch.c: Added _local functions which read channel data from
	only the cache and return success.

	* rcd.c (main): Try to load the channels off of disk first and
	then fetch from the net if they're unavailable.

2002-06-14  Joe Shaw  <joe@ximian.com>

	* rcd-cache.c: Mostly redone.  Most actions are now performed on a
	per-transfer RCDCacheEntry.  Entity tag and modification data are
	now kept in a in-memory cache.

	* rcd-transfer.c: Clean this up a ton, and make it more generic
	for protocol handlers.  Split out the file and http protocol
	handlers into their own files.

	* rcd-transfer-file.c, rcd-transfer-http.c: Added.

	* rcd-fetch.c: Update for all the cache and transfer API changes.

	* rcd-rpc-packsys.c (run_transaction): If caching is turned off,
	clean up the recently downloaded package files.
	(download_packages): Check to make sure the package_filename set
	in the package exists... if not, download the file again.

	* rcd-unix-server.c (rcd_unix_server_run_async): Check the return
	values from bind () and listen () and throw a warning about not
	being able to start the Unix server.

2002-06-13  Joe Shaw  <joe@ximian.com>

	* rcd-transfer.c (rcd_transfer_class_init): Change the marshal's
	arguments from STRING:INT to POINTER:UINT.  Since the data being
	passed through isn't null-terminated, it can't be passed around as
	a string.

2002-06-13  Jon Trowbridge  <trow@ximian.com>

	* rcd.c (initialize_logging): Initialize our logfile.

	* rcd-log-entry.c: Added.  An object for holding log info.

	* rcd-log.c: Added.  Basic code to initialize logging and write
	RCDLogEntry items out to the log file.

2002-06-12  Joe Shaw  <joe@ximian.com>

	* rcd-rpc-packsys.c (packsys_search): Renamed from packsys_query
	to match the design doc.
	(run_transaction): Send down the reason for the transaction
	failure in the message.

2002-06-12  Jon Trowbridge  <trow@ximian.com>

	* rcd-rpc-packsys.c (build_updates_list): Send the relevant
	package update descriptions along with each update.

2002-06-12  Joe Shaw  <joe@ximian.com>

	* rcd-fetch.c (rcd_fetch_packages): Take another callback to give
	progress on the file itself.

	* rcd-pending.c (rcd_pending_get_user_data,
	rcd_pending_set_user_data): Remove these... it's a GObject, so we
	can just use g_object_{set|get}_data().
	(rcd_pending_add_message, rcd_pending_get_messages): Added.
	Allows persistent messages to be set on an RCDPending so important
	info isn't lost in between polls.

	* rcd-rpc-packsys.c: Add messages to the pending object when we do
	important things, update it in package download progress callback.

	* rcd-rpc-system.c (system_poll_pending): Serialize the messages.

	* rcd-transfer.c: Use gsize for file sizes throughout.

2002-06-11  Joe Shaw  <joe@ximian.com>

	* rcd-fetch.c (rcd_fetch_packages): Added.  Downloads a list of
	packages and calls the provided callback when finished with all of
	them.

	* rcd-rpc-packsys.c (packsys_find_latest_version): Added.  Given a
	name, it finds the latest version in the available channels.
	(download_packages): Check to make sure we have packages to
	download and fire 'em off.
	(packsys_transact): If we don't need to download packages, begin
	the transaction.

	* rcd-rpc-util.c (rcd_rc_package_from_xmlrpc_package): Fix this up
	so it checks the channel before the installed bit.

	* rcd-transfer.c (http_done): Make sure we close the cache after
	we're done with the transfer.

	* rcd-unix-server.c (rcd_unix_server_run_async): Set ourselves up
	to ignore SIGPIPE.
	(read_data): Handle an error condition from g_io_channel_write()
	in the case of a SIGPIPE so we don't get ourselves into an
	infinite loop using 100% CPU.

2002-06-11  Jon Trowbridge  <trow@ximian.com>

	* rcd-rpc-util.c (rcd_rc_package_to_xmlrpc): Pass along infomation
	about importance when a package is an update.

	* rcd-rpc-packsys.c (packsys_get_updates): Added.  Implements
	the XML-RPC get_updates method.
	(rcd_rpc_packsys_register_methods): Register the get_updates
	method.

2002-06-11  Joe Shaw  <joe@ximian.com>

	* rcd-rpc-packsys.c (packsys_transact): Don't allow packages to be
	specified by name when doing an install, as it doesn't contain
	enough information to be really useful.

	* rcd-rpc-util.c (rcd_rc_package_to_xmlrpc): Change the
	"installed" flag to mean that there is a package installed on the
	system with the same name.

2002-06-07  Joe Shaw  <joe@ximian.com>

	* rcd-rpc-packsys.c (packsys_refresh_all_channels): Added.

	* rcd.c (refresh_channels_cb): Load the subscriptions after
	refreshing the channel list so we maintain the correct
	subscription info.

2002-06-07  Jon Trowbridge  <trow@ximian.com>

	* rcd-transfer.c (rcd_transfer_finalize): Check for NULL to
	avoid a run-time glib warning.

2002-06-07  Joe Shaw  <joe@ximian.com>

	* rcd-rpc-packsys.c:
	* rcd-rpc.c:
	* rcd-unix-server.c: Fix up warnings

	* rcd.c (remove_channel_cb): Uncomment the remove channel call.
	Requires updated libredcarpet.

2002-06-06  Joe Shaw  <joe@ximian.com>

	* rcd-heartbeat.c: Added.  Runs a heartbeat process which modules
	can register against.

	* rcd-prefs.c (rcd_prefs_get_heartbeat_interval): Added.

	* rcd.c (main): Set up the heartbeat function for refreshing the
	channels and start it.

2002-06-05  Joe Shaw  <joe@ximian.com>

	* rcd-rpc-packsys.c (packsys_query_file): Call
	rc_xmlrpc_to_rc_package() and pass in the types we accept.
	(run_transaction): Re-get the system packages after a transaction.
	(package_transact): Call rc_xmlrpc_to_rc_packagE() and pass in the
	types we accept.
	(packsys_transaction_get_status): Removed.  We can just use
	rcd.system.poll_pending().
	(rcd_rpc_packsys_register_methods): Don't register
	transaction_get_status().

	* rcd-rpc-util.c (rcd_rc_package_spec_to_xmlrpc):
	XMLRPC_FAIL_IF_FAULT() after trying to get each element.
	(rcd_rc_package_from_name, rcd_rc_package_from_file,
	rcd_rc_package_from_streamed_package,
	rcd_rc_package_from_xmlrpc_package): Added these functions which
	take xmlrpc_values and somehow get RCPackage structures for them.
	_from_name() is still broken.  Haven't decided if I like this API
	yet.
	(rcd_xmlrpc_to_rc_package): Added.  Calls a number of the above
	functions depending on flags that were passed into it specifying
	the types to accept.
	(rcd_xmlrpc_array_to_rc_package_slist): Added.

	* rcd-unix-server.c (rcd_unix_server_run_async): Make the socket
	writable by all users.
	
2002-06-05  Jon Trowbridge  <trow@ximian.com>

	* rcd-rpc-packsys.c (packsys_subscribe): Added.
	(packsys_unsubscribe): Added.
	(rcd_rpc_packsys_register_methods): Register our subscribe and
	unsubscribe methods.

2002-06-03  Jon Trowbridge  <trow@ximian.com>

	* rcd-rpc-packsys.c (packsys_refresh_channel): Added.  Given a
	channel id, reloads the channel's package info.
	(rcd_rpc_packsys_register_methods): Register the refresh_channel
	method.

	* rcd-fetch.c (rcd_fetch_channel): Return the id of the RCDPending
	associated with the package info transfer.

	* rcd-rpc-system.c (system_ping): Return the system time along
	with the other 'ping' info.
	(system_poll_pending): Pass along more information from the
	RCDPending object.

2002-06-03  Joe Shaw  <joe@ximian.com>

	* rcd-auth.c (auth_action_requirements_met): Fix a braindead goto.

	* rcd-pending.c (rcd_pending_get_user_data,
	rcd_pending_set_user_data): Added.  Allows some user data to be
	associated with an RCDPending dingus.

	* rcd-rpc-packsys.c (packsys_query): If we get a RCD_QUERY_INVALID
	back from the conversion, set a fault.
	(packsys_transact, packsys_transaction_get_status): Reenabled, does
	authentication and uses RCDPending.

	* rcd-rpc-util.c (rcd_rc_package_to_xmlrpc): Drop the
	package_filename and signature_filename fields... a client
	shouldn't need to know these.
	(rcd_xmlrpc_streamed_array_to_rc_package_slist): Added.

	* rcd-rpc.c (process_rpc_call): Set the caller's identity.
	(rcd_rpc_get_caller_identity): Added, allows RPC calls to get
	their caller's identity.  I'm a little worried about reentrancy
	here, so spit out a warning if it ever happens.

	* rcd-unix-server.c (read_cred): Change debug output to only be
	one line.

2002-06-03  Jon Trowbridge  <trow@ximian.com>

	* rcd.c (initialize_logging): Get initial daemon output from the
	rcd_about_* functions.

	* rcd-module.c: Re-ordered #include directives.

	* rcd-unix-server.c: Re-ordered #include directives.

	* rcd-rpc.c: Re-ordered #include directives.

	* rcd-rpc-util.h: Added RCD_XMLRPC_STRUCT_GET_DOUBLE and
	RCD_XMLRPC_STRUCT_SET_DOUBLE macros.

	* rcd-rpc-util.c (rcd_xmlrpc_streamed_to_rc_package): Set package
	to NULL to silence compiler warning.

	* rcd-rpc-system.c (system_ping): Have ping return server info
	instead of just the time.
	(system_poll_pending): Added.  This allows us to poll for the
	status of pending operations to see what happened, allow us to
	update progress bars, etc.

	* rcd-fetch.c (rcd_fetch_channel_list): Make our channel list
	download be a blocking transfer.
	(rcd_fetch_channel): ...but make our channel package info download
	non-blocking.

	* rcd-transfer.c (rcd_transfer_finalize): Unref our RCDPending.
	(rcd_transfer_set_flags): Anal arg checking.
	(rcd_transfer_set_proxy_url): Anal arg checking.
	(rcd_transfer_get_pending): Accessor for our RCDPending.
	(rcd_transfer_get_error): Anal arg checking.
	(rcd_transfer_begin): If we aren't a blocking transfer (and don't
	explicitly say not to do so), create an RCDPending object and hook
	up the signals so that it will track the transfer's progress.
	Return the id of the RCDPending instead of a GByteArray.
	(rcd_transfer_begin_blocking): An explicit entry-point for
	blocking transfers, which won't create an RCDPending and returns a
	GByteArray.

	* rcd-transfer.h: Add an RCDPending to the RCDTransfer struct.

	* rcd-about.c: Added.  A place to hide important strings behind an
	simple API.

	* rcd-pending.c: Added.  A gadget for tracking the progress of
	long-running operations in the daemon.

2002-05-30  Joe Shaw  <joe@ximian.com>

	* rcd-auth.c (rcd_string_to_auth_action_list): Fix an invalid
	return type.

	* rcd-rpc-packsys.c (packsys_query_file): Uncomment this and bring
	it up to snuff, register the call.

	* rcd-rpc-util.c (rcd_xmlrpc_streamed_to_rc_package): Added.
	Takes either a filename or a streamed package, queries it, and
	returns an RCPackage instance.

	* rcd-unix-server.c (read_data): Only verify the credentials if
	they haven't been verified previously.

2002-05-30  Joe Shaw  <joe@ximian.com>

	* rcd-auth.c: Add a new special auth type, "superuser", which
	grants all rights to any user who has it.

	* rcd-rpc.c (process_rpc_call): Use the new preinvoke method code
	I added to xmlrpc-c to do access control.  It's a lot cleaner, and
	you can't subvert it by using system.multicall(). :)
	(access_control_check): Added.  Does an ACL lookup and check
	before all RPC calls and sets a fault if not approved.
	(unix_rpc_call): Implement identites for Unix domain RPC calls.

	* rcd-unix-server.c (RCDUnixServerCallback): Return a handle which
	contains both the method data and credential info.
	(read_cred): Check to make sure we got valid credentials and put
	that info in the handle.

2002-05-29  Joe Shaw  <joe@ximian.com>

	* rcd-auth.c: Made more extensible for modules by making ACLs
	GQuark based and passing around lists of GQuarks for privileges.

	* rcd-identity.c (rcd_identity_from_password_file):
	* rcd-rpc-packsys.c (rcd_rpc_packsys_register_methods):
	* rcd-rpc-sample.c (rcd_module_load): 
	* rcd-rpc-system.c (rcd_rpc_system_register_methods): Update to
	reflect changes in auth API.

	* rcd-module.c (rcd_module_init): Use rc_debug

	* rcd-prefs.c (rcd_prefs_get_host): Use RC_MAGIC if it is set.

	* rcd-rpc.c (process_rpc_call): Move some shared code between the
	protocols here.

2002-05-29  Jon Trowbridge  <trow@ximian.com>

	* rcd-rpc-packsys.c (packsys_get_channels): Added.
	(add_package_cb): Ref the package, so we don't leave a dangling
	pointer in our world later when we free the list and its contents.
	(rcd_rpc_packsys_register_methods): Register the get_channels
	method.

	* rcd-rpc-util.c (rcd_rc_channel_to_xmlrpc): Added.

	* rcd-query-packages.c: Added.  Implements package queries on top
	of the framework in rcd-query.c.

	* rcd-query.c: Abstracts this code into a generalized querying
	mechanism (which we will be able to also use for log & news
	queries).

	* rcd-subscriptions.c: Added.  Reads and writes the XML file
	containing the subscription information.

	* rcd-fetch.c (rcd_fetch_channel): Use
	rc_world_add_packages_from_buffer so that we get the full benefit
	of the SAX parser.

2002-05-28  Joe Shaw  <joe@ximian.com>

	* rcd-auth.c: Change RCDAuthAction to #defines which can be
	bitwise ORed.
	(rcd_auth_action_to_string): No longer const, can output a list of
	strings
	(rcd_string_to_auth_action): Parses a list of strings and returns
	an RCDAuthAction
	(rcd_auth_approve_action): Ease up on the argument restrictions
	for now.  If RCD_ENFORCE_AUTH is enabled, actually check
	privileges.

	* rcd-identity.c (rcd_identity_from_password_file): Added.  Looks
	for a user in the password file and returns an RCDIdentity with
	its username, password, and privileges.

	* rcd-rpc.c (rcd_rpc_init): Initialize a hash table for storing
	method info.
	(rcd_rpc_register_method): Take an RCDAuthAction parameter
	specifying the privileges required to call this method.  Add
	method info to the hash table.
	(soup_rpc_callback): Authenticate the user from HTTP Basic auth
	against an RCDIdentity from the password file.  Then look up the
	method info from the hash table and call rcd_auth_approve_action()
	to verify the privileges.

	* rcd-rpc-packsys.c (rcd_rpc_packsys_register_methods):
	* rcd-rpc-sample.c (rcd_module_load):
	* rcd-rpc-system.c (rcd_rpc_system_register_methods): Pass in
	privileges required to call these methods.

2002-05-28  Jon Trowbridge  <trow@ximian.com>

	* rcd.c: Added stuff to download channel and package info and to
	use a debug display handler.  Removed some old testing code.

	* rcd-transfer.c: Poked at the various bits of rc_debug-ism.

	* rcd-fetch.c: Added.  Some code for downloading channel and
	package information and storing it in the RCWorld.

	* rcd-cache.c (rcd_cache_open): Don't free cache_fn and tmp_fn
	until we've finished using them.

	* rcd-module.c: Changed to use rc_debug for spew.

	* rcd-prefs.c (rcd_prefs_get_cache_dir): Use a cache file under
	/tmp for now, so there is less warning spew when not running as
	root.

2002-05-24  Joe Shaw  <joe@ximian.com>

	* Makefile.am: Add in rcd-rpc-packsys.[ch], rcd-rpc-util.[ch],
	rcd-unix-server.[ch]: Added these.

	* rcd-rpc.c (unix_rpc_callback): Handle an XML-RPC callback over
	unix domain sockets.
	(rpc_callback, default_callback): Prefix these functions with
	"soup_"
	(server_init): Removed this function, it wasn't long enough to be
	useful.
	(run_server_thread): Move the contents of server_init() here, add
	a call to rcd_unix_server_run_async() for handling requests over
	unix domain sockets.

	* rcd-rpc.h: Move header includes inside of the only-include-once
	#ifdef magic.

	* rcd-rpc-packsys.[ch]: Added.  Contains packaging system RPC
	calls (just query for now).

	* rcd-rpc-util.[ch]: Added.  Contains utility functions for
	converting an RCPackage or RCPackageSList to XML-RPC values and
	XML-RPC values into RCDQueryParts.

	* rcd-unix-server.[ch]: Added.  Lame first cut at doing XML-RPC
	calls over unix domain sockets.

	* rcd.c (initialize_rc_world): Register the packaging system RPC
	methods.

2002-05-24  Joe Shaw  <joe@ximian.com>

	* Makefile.am: Lots of magic

	* rcd-module.c: Added dynamic module loading.

	* rcd-rpc.c:
	* rcd-rpc-system.c:
	* rcd-rpc-sample.c: Added RPC framework with a sample module
	implementation and some system functions (query_module, ping,
	etc.)

	* rcd.c: Initialize the module loader, run a main loop.

2002-05-23  Jon Trowbridge  <trow@ximian.com>

	* rcd-query.c: Added a framework for complex queries.

