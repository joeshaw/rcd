dnl -*- tab-width: 2; indent-tabs-mode: nil -*-

### init & version stuff

dnl AC_INIT(rcd, $VERSION, http://bugzilla.ximian.com/enter_bug.gci?product=rcd)
dnl AC_CONFIG_SRCDIR(src/rcd.c)
dnl AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AC_INIT(src/rcd.c)

MAJOR_VERSION=1
MINOR_VERSION=2
MICRO_VERSION=0
VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION

AM_INIT_AUTOMAKE(rcd, $VERSION)

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)

AC_DEFINE_UNQUOTED(MAJOR_VERSION, $MAJOR_VERSION, [Major Version Number])
AC_DEFINE_UNQUOTED(MINOR_VERSION, $MINOR_VERSION, [Minor Version Number])
AC_DEFINE_UNQUOTED(MICRO_VERSION, $MICRO_VERSION, [Micro Version Number])

AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

### args

AC_ARG_WITH(xmlrpc-prefix,
  [  --with-xmlrpc-prefix=PREFIX],
  with_xmlrpc_prefix="$withval")

AC_ARG_WITH(libsoup, 
  [  --with-libsoup=<path>])

AC_ARG_ENABLE(kernel-workaround, 
  [  --enable-kernel-workaround],
  AC_DEFINE(NEED_KERNEL_FD_WORKAROUND, 1, [Define if you need the FD workaround]))d

### basic checks

AC_PROG_CC
AC_ISC_POSIX
AC_STDC_HEADERS
AM_PROG_CC_STDC
AC_HEADER_STDC

AM_PROG_LIBTOOL

### get cflags and libs

PKG_CHECK_MODULES(RCD, glib-2.0 gmodule-2.0 gobject-2.0 libxml-2.0 libredcarpet)

###
### libsoup magic
###
if test "x$with_libsoup" != "x"; then
  AC_MSG_CHECKING(libsoup configuration in $with_libsoup/soup-2.0.pc)

  if test -f $with_libsoup/soup-2.0.pc || test -l $with_libsoup/soup-2.0.pc; then 
    true
  else
    echo "couldn't find $with_libsoup/soup-2.0.pc"
    AC_MSG_ERROR($with_libsoup must be the top of a built libsoup tree)
  fi

  AC_MSG_RESULT(done)

  PKG_CONFIG_PATH=${with_libsoup}${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}

  export PKG_CONFIG_PATH

  PKG_CHECK_MODULES(LIBSOUP, soup-2.0)

  real_with_libsoup=`cd $with_libsoup && pwd`

  CPPFLAGS="${CPPFLAGS:+$CPPFLAGS }-I$real_with_libsoup"

  LIBSOUP_LIBS=`echo $LIBSOUP_LIBS | sed 's/-L[[^ ]]* *//g'`
  LIBSOUP_LIBS=`echo $LIBSOUP_LIBS | sed "s,-lsoup-2.0,$real_with_libsoup/libsoup/.libs/libsoup-2.0.a,g"`

  RCD_LIBS=`echo $RCD_LIBS | sed 's/-lsoup//g'`
else
  PKG_CHECK_MODULES(LIBSOUP, soup-2.0)
  RCD_CFLAGS="${RCD_CFLAGS:+$RCD_CFLAGS }$LIBSOUP_CFLAGS"
fi

RCD_LIBS="$RCD_LIBS $LIBSOUP_LIBS"

###
### xmlrpc 
###

AC_PATH_PROG(XMLRPC_CONFIG, xmlrpc-c-config, no, ${with_xmlrpc_prefix:+$with_xmlrpc_prefix/bin:}${PATH})

if test x$XMLRPC_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xmlrpc-c-config -- please install the xmlrpc-c library)
fi

XMLRPC_CFLAGS=`$XMLRPC_CONFIG --cflags`
XMLRPC_LIBS=`$XMLRPC_CONFIG --libs`

###
### uuid
###

AC_CHECK_HEADERS(uuid/uuid.h,,
  AC_MSG_ERROR(couldn't find uuid.h.  In Debian it is in the uuid-dev package.  On Red Hat it's e2fsprogs-devel.))

RCD_CFLAGS="$RCD_CFLAGS $XMLRPC_CFLAGS"
RCD_LIBS="$RCD_LIBS $XMLRPC_LIBS -lpopt -luuid"

###
### Checking for SO_PEERCRED
###

AC_CACHE_CHECK(for SO_PEERCRED, have_so_peercred,
	AC_TRY_COMPILE([
		#include <sys/types.h>
		#include <sys/socket.h>
		], [
		int rc;
		rc = getsockopt(0, SOL_SOCKET, SO_PEERCRED, NULL, NULL);
		], have_so_peercred=yes, have_so_peercred=no))
if test $have_so_peercred = yes; then
	AC_DEFINE(HAVE_SO_PEERCRED, ,[Define if SO_PEERCRED is a valid sockopt])
fi

###
### static?
###
AC_ARG_ENABLE(static-binary, 
  [  --enable-static-binary  link as many libraries statically as possible])

if test "$enable_static_binary" = "yes"; then
  LINK_BEGIN="-Wl,-Bstatic"
  LINK_END="-Wl,-Bdynamic"
else
  LINK_BEGIN=
  LINK_END=
fi

# evil voodoo to clean up link line
SHARED_ONLY=
HOST_OS=`uname`
case "$HOST_OS" in
  SunOS)
    FORCE_SHLIBS="dl resolv rt nsl pthread rt"
  ;;
  Linux)
    FORCE_SHLIBS="dl pthread rt"
    RCD_LIBS="$RCD_LIBS -lutil"
  ;;
  *)
  ;;
esac

for lib in $FORCE_SHLIBS; do
  if echo $RCD_LIBS | grep -- "-l$lib" >/dev/null 2>&1; then
    RCD_LIBS=`echo $RCD_LIBS | sed "s,-l$lib ,,g"`
    SHARED_ONLY="$SHARED_ONLY -l$lib"
  fi
done

AC_SUBST(LINK_BEGIN)
AC_SUBST(LINK_END)
AC_SUBST(SHARED_ONLY)
AC_SUBST(RCD_CFLAGS)
AC_SUBST(RCD_LIBS)

# Put the datadir into the rcd-buddy.in file.
DDIR=`echo $datadir | sed -e "s,"'${prefix}'",$prefix,"`
AC_SUBST(DDIR)

AC_ARG_WITH(init-script-type,
  [  --with-init-script-type=TYPE (redhat, suse, debian)],
  with_init_script_type="$withval",
  with_init_script_type="redhat")

AM_CONDITIONAL(INIT_REDHAT, false)
AM_CONDITIONAL(INIT_SUSE, false)
AM_CONDITIONAL(INIT_DEBIAN, false)

if test "x$with_init_script_type" = "xredhat"; then
  INIT_SCRIPT=rcd.init.redhat
  AM_CONDITIONAL(INIT_REDHAT, true)
elif test "x$with_init_script_type" = "xsuse"; then
  INIT_SCRIPT=rcd.init.suse
  AM_CONDITIONAL(INIT_SUSE, true)
elif test "x$with_init_script_type" = "xdebian"; then
  INIT_SCRIPT=rcd.init.debian
  AM_CONDITIONAL(INIT_DEBIAN, true)
else
  AC_ERROR([Unsupported init script type])
fi

AC_ARG_WITH(usermode-type,
  [  --with-usermode-type=TYPE (redhat7, redhat8)],
  with_usermode_type="$withval",
  with_usermode_type="none")

AM_CONDITIONAL(USERMODE, false)
AM_CONDITIONAL(USERMODE_REDHAT7, false)
AM_CONDITIONAL(USERMODE_REDHAT8, false)

if test "x$with_usermode_type" = "xredhat7"; then
  AM_CONDITIONAL(USERMODE, true)
  AM_CONDITIONAL(USERMODE_REDHAT7, true)
elif test "x$with_usermode_type" = "xredhat8"; then
  AM_CONDITIONAL(USERMODE, true)
  AM_CONDITIONAL(USERMODE_REDHAT8, true)
fi

### build makefiles

AC_OUTPUT([
Makefile
src/Makefile
src/rcd-buddy
rcd.init.redhat
rcd.init.suse
rcd.init.debian
rcd.console
rcd.pc
])

echo "

Configuration:

  Source code location: ${srcdir}
  Prefix:               ${prefix}
  Compiler:             ${CC}

  Build CFLAGS:         ${RCD_CFLAGS}

  Build LIBS:           ${RCD_LIBS}

  Static binary:        ${enable_static_binary}

  Shared ONLY LIBS:     ${SHARED_ONLY}

  Init script type:     ${with_init_script_type}
  Usermode type:        ${with_usermode_type}

"

