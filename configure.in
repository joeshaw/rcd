dnl -*- tab-width: 2; indent-tabs-mode: nil -*-

### init & version stuff



dnl AC_INIT(rcd, $VERSION, http://bugzilla.ximian.com/enter_bug.gci?product=rcd)
dnl AC_CONFIG_SRCDIR(src/rcd.c)
dnl AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AC_INIT(src/rcd.c)

MAJOR_VERSION=0
MINOR_VERSION=6
MICRO_VERSION=2
VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION

AM_INIT_AUTOMAKE(rcd, $VERSION)

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)

AC_DEFINE_UNQUOTED(MAJOR_VERSION, $MAJOR_VERSION)
AC_DEFINE_UNQUOTED(MINOR_VERSION, $MINOR_VERSION)
AC_DEFINE_UNQUOTED(MICRO_VERSION, $MICRO_VERSION)

AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

### args

AC_ARG_WITH(xmlrpc-prefix,
  [  --with-xmlrpc-prefix=PREFIX],
  with_xmlrpc_prefix="$withval")

AC_ARG_WITH(soup, 
  [  --with-soup=<path>])

### basic checks

AC_PROG_CC
AC_ISC_POSIX
AC_STDC_HEADERS
AM_PROG_CC_STDC
AC_HEADER_STDC

AM_PROG_LIBTOOL

### get cflags and libs

PKG_CHECK_MODULES(RCD, glib-2.0 gmodule-2.0 gobject-2.0 libxml-2.0 libredcarpet)

###
### soup magic
###
if test "x$with_soup" != "x"; then
  AC_MSG_CHECKING(soup configuration in $with_soup/soup.pc)

  if test -f $with_soup/soup.pc || test -l $with_soup/soup.pc; then 
    true
  else
    echo "couldn't find $with_soup/soup.pc"
    AC_MSG_ERROR($with_soup must be the top of a built soup tree)
  fi

  AC_MSG_RESULT(done)

  PKG_CONFIG_PATH=${with_soup}${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}

  export PKG_CONFIG_PATH

  PKG_CHECK_MODULES(SOUP, soup >= 0.7.5)

  real_with_soup=`cd $with_soup && pwd`

  CPPFLAGS="${CPPFLAGS:+$CPPFLAGS }-I$real_with_soup/src"

  SOUP_LIBS=`echo $SOUP_LIBS | sed 's/-L[[^ ]]* *//g'`
  SOUP_LIBS=`echo $SOUP_LIBS | sed "s,-lsoup,$real_with_soup/src/libsoup/.libs/libsoup.a,g"`

  RCD_LIBS=`echo $RCD_LIBS | sed 's/-lsoup//g'`
else
  PKG_CHECK_MODULES(SOUP, soup >= 0.7.5)
  RCD_CFLAGS="${RCD_CFLAGS:+$RCD_CFLAGS }$SOUP_CFLAGS"
fi

RCD_LIBS="$RCD_LIBS $SOUP_LIBS"

###
### xmlrpc 
###

AC_PATH_PROG(XMLRPC_CONFIG, xmlrpc-c-config, no, ${with_xmlrpc_prefix:+$with_xmlrpc_prefix/bin:}${PATH})

if test x$XMLRPC_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find xmlrpc-c-config -- please install the xmlrpc-c library)
fi

XMLRPC_CFLAGS=`$XMLRPC_CONFIG --cflags`
XMLRPC_LIBS=`$XMLRPC_CONFIG --libs`

###
### uuid
###

AC_CHECK_HEADERS(uuid/uuid.h,,
  AC_MSG_ERROR(couldn't find uuid.h.  In Debian it is in the uuid-dev package.  On Red Hat it's e2fsprogs-devel.))

RCD_CFLAGS="$RCD_CFLAGS $XMLRPC_CFLAGS"
RCD_LIBS="$RCD_LIBS $XMLRPC_LIBS -lpopt -luuid"


###
### static?
###
AC_ARG_ENABLE(static-binary, 
  [  --enable-static-binary  link as many libraries statically as possible])

if test "$enable_static_binary" = "yes"; then
  LINK_BEGIN="-Wl,-Bstatic"
  LINK_END="-Wl,-Bdynamic"
else
  LINK_BEGIN=
  LINK_END=
fi

# evil voodoo to clean up link line
SHARED_ONLY=
HOST_OS=`uname`
case "$HOST_OS" in
  SunOS)
    FORCE_SHLIBS="dl resolv rt nsl pthread rt"
  ;;
  Linux)
    FORCE_SHLIBS="dl pthread rt"
    RCD_LIBS="$RCD_LIBS -lutil"
  ;;
  *)
  ;;
esac

for lib in $FORCE_SHLIBS; do
  if echo $RCD_LIBS | grep -- "-l$lib" >/dev/null 2>&1; then
    RCD_LIBS=`echo $RCD_LIBS | sed "s,-l$lib ,,g"`
    SHARED_ONLY="$SHARED_ONLY -l$lib"
  fi
done

AC_SUBST(LINK_BEGIN)
AC_SUBST(LINK_END)
AC_SUBST(SHARED_ONLY)
AC_SUBST(RCD_CFLAGS)
AC_SUBST(RCD_LIBS)

RED_CARPET_BINDIR="${prefix}/bin"
RED_CARPET_SBINDIR="${prefix}/sbin"

AC_SUBST(RED_CARPET_BINDIR)
AC_SUBST(RED_CARPET_SBINDIR)

DDIR=`echo $datadir | sed -e "s,"'${prefix}'",$prefix,"`
AC_SUBST(DDIR)

### build makefiles

AC_OUTPUT([
Makefile
src/Makefile
src/rcd-buddy
rcd.init
])

echo "

Configuration:

  Source code location: ${srcdir}
  Prefix:               ${prefix}
  Compiler:             ${CC}

  Build CFLAGS:         ${RCD_CFLAGS}

  Build LIBS:           ${RCD_LIBS}

  Static binary:        ${enable_static_binary}

  Shared ONLY LIBS:     ${SHARED_ONLY}

"

